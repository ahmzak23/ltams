version: '3.8'

services:
  # Application Services
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - API_GATEWAY_URL=http://api-gateway:4000
      - NODE_ENV=development
    depends_on:
      - api-gateway

  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    ports:
      - "4000:4000"
    environment:
      - BACKEND_URL=http://backend:8000
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4318
      - OTEL_SERVICE_NAME=api-gateway
    depends_on:
      - backend
      - otel-collector

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/ticketdb
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4318
      - OTEL_SERVICE_NAME=backend
    depends_on:
      - db
      - otel-collector

  worker:
    build:
      context: ./worker
      dockerfile: Dockerfile
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/ticketdb
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4318
      - OTEL_SERVICE_NAME=worker
    depends_on:
      - db
      - otel-collector

  # Database
  db:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=ticketdb
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data

  # Database Initialization (one-time)
  db-init:
    build:
      context: ./backend
      dockerfile: Dockerfile
    command: >
      bash -c "python init_db.py"
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/ticketdb
    depends_on:
      - db

  # Observability Stack
  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./observability/prometheus:/etc/prometheus
    ports:
      - "9091:9090"

  loki:
    image: grafana/loki:latest
    ports:
      - "3100:3100"

  tempo:
    image: grafana/tempo:2.2.0
    ports:
      - "3200:3200"
    volumes:
      - ./observability/tempo:/etc/tempo
      - tempo_data:/tmp/tempo
    command: -config.file=/etc/tempo/tempo-config.yml

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_DASHBOARDS_DEFAULT_HOME_DASHBOARD_PATH=/var/lib/grafana/dashboards/database-team.json
    volumes:
      - ./observability/grafana/provisioning:/etc/grafana/provisioning
      - ./observability/grafana/dashboards:/var/lib/grafana/dashboards
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus
      - loki

  otel-collector:
    image: otel/opentelemetry-collector:latest
    command: ["--config=/etc/otel-collector-config.yaml"]
    volumes:
      - ./otel-collector-config.yaml:/etc/otel-collector-config.yaml
    ports:
      - "4317:4317"   # OTLP gRPC
      - "4318:4318"   # OTLP HTTP
    depends_on:
      - prometheus
      - loki

  alertmanager:
    image: prom/alertmanager:v0.25.0
    ports:
      - "9093:9093"
    volumes:
      - ./observability/alertmanager:/etc/alertmanager
      - alertmanager_data:/data
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/data'

volumes:
  postgres_data:
  prometheus_data:
  loki_data:
  tempo_data:
  grafana_data:
  alertmanager_data: 